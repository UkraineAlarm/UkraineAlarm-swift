//
// WebHookAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class WebHookAPI {
    /**
     Відписка на WebHook про нові сирени та їх відбій

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV3WebhookDelete(body: WebHookModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiV3WebhookDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Відписка на WebHook про нові сирени та їх відбій
     - DELETE /api/v3/webhook
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiV3WebhookDeleteWithRequestBuilder(body: WebHookModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/v3/webhook"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Оновлення WebHook посилання про нові сирени та їх відбій

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV3WebhookPatch(body: WebHookModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiV3WebhookPatchWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Оновлення WebHook посилання про нові сирени та їх відбій
     - PATCH /api/v3/webhook
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiV3WebhookPatchWithRequestBuilder(body: WebHookModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/v3/webhook"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Підписка на WebHook про нові сирени та їх відбій. У вебхукі відпрявляється подія тривоги/відбою (приклад в відповіді \"200\")

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV3WebhookPost(body: WebHookModel? = nil, completion: @escaping ((_ data: AlertRegionModel?,_ error: Error?) -> Void)) {
        apiV3WebhookPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Підписка на WebHook про нові сирени та їх відбій. У вебхукі відпрявляється подія тривоги/відбою (приклад в відповіді \"200\")
     - POST /api/v3/webhook
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: Token
     - examples: [{contentType=application/json, example={
  "regionId" : "regionId",
  "regionType" : "State",
  "regionEngName" : "regionEngName",
  "regionName" : "regionName",
  "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
  "activeAlerts" : [ {
    "regionId" : "regionId",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "type" : "UNKNOWN"
  }, {
    "regionId" : "regionId",
    "lastUpdate" : "2000-01-23T04:56:07.000+00:00",
    "type" : "UNKNOWN"
  } ]
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AlertRegionModel> 
     */
    open class func apiV3WebhookPostWithRequestBuilder(body: WebHookModel? = nil) -> RequestBuilder<AlertRegionModel> {
        let path = "/api/v3/webhook"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AlertRegionModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
